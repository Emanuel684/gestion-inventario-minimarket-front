import { Injectable } from '@angular/core';
import { StorageUtil, isBrowser } from './util';
import * as i0 from "@angular/core";
export class StorageService {
    constructor(storage) {
        this.storage = storage;
    }
    get(key) {
        return StorageUtil.get(this.storage, key);
    }
    set(key, value, expiredAt = 0, expiredUnit = 'd') {
        return StorageUtil.set(this.storage, key, value, expiredAt, expiredUnit);
    }
    /**
     * 删除指定key，如：
     * - `remove('key')` 删除 `key` 键
     * - `remove(/BMap_\w+/)` 批量删除所有 BMap_ 开头的键
     * @param key 键名或正则表达式
     */
    remove(key) {
        if (typeof key === 'string') {
            StorageUtil.remove(this.storage, key);
            return;
        }
        let index = 0;
        let next = StorageUtil.key(this.storage, index);
        const ls = [];
        while (next) {
            if (key.test(next)) {
                ls.push(next);
            }
            next = StorageUtil.key(this.storage, ++index);
        }
        ls.forEach((v) => StorageUtil.remove(this.storage, v));
    }
    clear() {
        this.storage?.clear();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.0.3", ngImport: i0, type: StorageService, deps: [{ token: Storage }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.0.3", ngImport: i0, type: StorageService }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.0.3", ngImport: i0, type: StorageService, decorators: [{
            type: Injectable
        }], ctorParameters: () => [{ type: Storage }] });
export class LocalStorageService extends StorageService {
    constructor() {
        super(isBrowser ? localStorage : null);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.0.3", ngImport: i0, type: LocalStorageService, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.0.3", ngImport: i0, type: LocalStorageService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.0.3", ngImport: i0, type: LocalStorageService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [] });
export class SessionStorageService extends StorageService {
    constructor() {
        super(isBrowser ? sessionStorage : null);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.0.3", ngImport: i0, type: SessionStorageService, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.0.3", ngImport: i0, type: SessionStorageService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.0.3", ngImport: i0, type: SessionStorageService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2xpYi9zcmMvc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxXQUFXLEVBQWUsU0FBUyxFQUFFLE1BQU0sUUFBUSxDQUFDOztBQUc3RCxNQUFNLE9BQU8sY0FBYztJQUN6QixZQUFvQixPQUF1QjtRQUF2QixZQUFPLEdBQVAsT0FBTyxDQUFnQjtJQUFHLENBQUM7SUFFL0MsR0FBRyxDQUFDLEdBQVc7UUFDYixPQUFPLFdBQVcsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxHQUFHLENBQUMsQ0FBQztJQUM1QyxDQUFDO0lBRUQsR0FBRyxDQUFDLEdBQVcsRUFBRSxLQUFVLEVBQUUsWUFBb0IsQ0FBQyxFQUFFLGNBQTJCLEdBQUc7UUFDaEYsT0FBTyxXQUFXLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsR0FBRyxFQUFFLEtBQUssRUFBRSxTQUFTLEVBQUUsV0FBVyxDQUFDLENBQUM7SUFDM0UsQ0FBQztJQUVEOzs7OztPQUtHO0lBQ0gsTUFBTSxDQUFDLEdBQW9CO1FBQ3pCLElBQUksT0FBTyxHQUFHLEtBQUssUUFBUSxFQUFFLENBQUM7WUFDNUIsV0FBVyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLEdBQUcsQ0FBQyxDQUFDO1lBQ3RDLE9BQU87UUFDVCxDQUFDO1FBQ0QsSUFBSSxLQUFLLEdBQUcsQ0FBQyxDQUFDO1FBQ2QsSUFBSSxJQUFJLEdBQUcsV0FBVyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQ2hELE1BQU0sRUFBRSxHQUFhLEVBQUUsQ0FBQztRQUN4QixPQUFPLElBQUksRUFBRSxDQUFDO1lBQ1osSUFBSSxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUM7Z0JBQ25CLEVBQUUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDaEIsQ0FBQztZQUNELElBQUksR0FBRyxXQUFXLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUNoRCxDQUFDO1FBQ0QsRUFBRSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDekQsQ0FBQztJQUVELEtBQUs7UUFDSCxJQUFJLENBQUMsT0FBTyxFQUFFLEtBQUssRUFBRSxDQUFDO0lBQ3hCLENBQUM7OEdBcENVLGNBQWM7a0hBQWQsY0FBYzs7MkZBQWQsY0FBYztrQkFEMUIsVUFBVTs7QUF5Q1gsTUFBTSxPQUFPLG1CQUFvQixTQUFRLGNBQWM7SUFDckQ7UUFDRSxLQUFLLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ3pDLENBQUM7OEdBSFUsbUJBQW1CO2tIQUFuQixtQkFBbUIsY0FETixNQUFNOzsyRkFDbkIsbUJBQW1CO2tCQUQvQixVQUFVO21CQUFDLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRTs7QUFRbEMsTUFBTSxPQUFPLHFCQUFzQixTQUFRLGNBQWM7SUFDdkQ7UUFDRSxLQUFLLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQzNDLENBQUM7OEdBSFUscUJBQXFCO2tIQUFyQixxQkFBcUIsY0FEUixNQUFNOzsyRkFDbkIscUJBQXFCO2tCQURqQyxVQUFVO21CQUFDLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFN0b3JhZ2VVdGlsLCBFeHBpcmVkVW5pdCwgaXNCcm93c2VyIH0gZnJvbSAnLi91dGlsJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIFN0b3JhZ2VTZXJ2aWNlIHtcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBzdG9yYWdlOiBTdG9yYWdlIHwgbnVsbCkge31cblxuICBnZXQoa2V5OiBzdHJpbmcpOiBhbnkge1xuICAgIHJldHVybiBTdG9yYWdlVXRpbC5nZXQodGhpcy5zdG9yYWdlLCBrZXkpO1xuICB9XG5cbiAgc2V0KGtleTogc3RyaW5nLCB2YWx1ZTogYW55LCBleHBpcmVkQXQ6IG51bWJlciA9IDAsIGV4cGlyZWRVbml0OiBFeHBpcmVkVW5pdCA9ICdkJyk6IHZvaWQge1xuICAgIHJldHVybiBTdG9yYWdlVXRpbC5zZXQodGhpcy5zdG9yYWdlLCBrZXksIHZhbHVlLCBleHBpcmVkQXQsIGV4cGlyZWRVbml0KTtcbiAgfVxuXG4gIC8qKlxuICAgKiDliKDpmaTmjIflrpprZXnvvIzlpoLvvJpcbiAgICogLSBgcmVtb3ZlKCdrZXknKWAg5Yig6ZmkIGBrZXlgIOmUrlxuICAgKiAtIGByZW1vdmUoL0JNYXBfXFx3Ky8pYCDmibnph4/liKDpmaTmiYDmnIkgQk1hcF8g5byA5aS055qE6ZSuXG4gICAqIEBwYXJhbSBrZXkg6ZSu5ZCN5oiW5q2j5YiZ6KGo6L6+5byPXG4gICAqL1xuICByZW1vdmUoa2V5OiBzdHJpbmcgfCBSZWdFeHApOiB2b2lkIHtcbiAgICBpZiAodHlwZW9mIGtleSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIFN0b3JhZ2VVdGlsLnJlbW92ZSh0aGlzLnN0b3JhZ2UsIGtleSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGxldCBpbmRleCA9IDA7XG4gICAgbGV0IG5leHQgPSBTdG9yYWdlVXRpbC5rZXkodGhpcy5zdG9yYWdlLCBpbmRleCk7XG4gICAgY29uc3QgbHM6IHN0cmluZ1tdID0gW107XG4gICAgd2hpbGUgKG5leHQpIHtcbiAgICAgIGlmIChrZXkudGVzdChuZXh0KSkge1xuICAgICAgICBscy5wdXNoKG5leHQpO1xuICAgICAgfVxuICAgICAgbmV4dCA9IFN0b3JhZ2VVdGlsLmtleSh0aGlzLnN0b3JhZ2UsICsraW5kZXgpO1xuICAgIH1cbiAgICBscy5mb3JFYWNoKCh2KSA9PiBTdG9yYWdlVXRpbC5yZW1vdmUodGhpcy5zdG9yYWdlLCB2KSk7XG4gIH1cblxuICBjbGVhcigpOiB2b2lkIHtcbiAgICB0aGlzLnN0b3JhZ2U/LmNsZWFyKCk7XG4gIH1cbn1cblxuQEluamVjdGFibGUoeyBwcm92aWRlZEluOiAncm9vdCcgfSlcbmV4cG9ydCBjbGFzcyBMb2NhbFN0b3JhZ2VTZXJ2aWNlIGV4dGVuZHMgU3RvcmFnZVNlcnZpY2Uge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcihpc0Jyb3dzZXIgPyBsb2NhbFN0b3JhZ2UgOiBudWxsKTtcbiAgfVxufVxuXG5ASW5qZWN0YWJsZSh7IHByb3ZpZGVkSW46ICdyb290JyB9KVxuZXhwb3J0IGNsYXNzIFNlc3Npb25TdG9yYWdlU2VydmljZSBleHRlbmRzIFN0b3JhZ2VTZXJ2aWNlIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoaXNCcm93c2VyID8gc2Vzc2lvblN0b3JhZ2UgOiBudWxsKTtcbiAgfVxufVxuIl19