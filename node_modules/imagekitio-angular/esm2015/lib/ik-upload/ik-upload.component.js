import { ElementRef, Component, Input, Output, EventEmitter } from '@angular/core';
import { ImagekitService } from '../imagekitio-angular.service';
import * as i0 from "@angular/core";
import * as i1 from "../imagekitio-angular.service";
import * as i2 from "@angular/common";
export class IkUploadComponent {
    constructor(el, imagekit) {
        this.el = el;
        this.imagekit = imagekit;
        this.onError = new EventEmitter();
        this.onSuccess = new EventEmitter();
        this.fileToUpload = null;
        this.handleAuthResponse = ({ signature, token, expire }, ik, params, options, progressCb) => {
            ik.upload(Object.assign(Object.assign({}, params), { signature, token, expire }), (err, result) => {
                this.handleUploadResponse(err, result, options, progressCb);
            });
        };
    }
    ngAfterViewInit() {
        this.buttonRef && this.buttonRef.addEventListener('click', () => { this.el.nativeElement.children[0].click(); });
    }
    abort() {
        if (this.xhr) {
            this.xhr.abort();
        }
    }
    handleFileInput(e) {
        // Using IK-upload
        const files = e.target.files;
        this.fileToUpload = files.item(0);
        const options = {
            file: this.fileToUpload,
            fileName: this.fileName || this.fileToUpload.name,
            useUniqueFileName: this.useUniqueFileName,
            tags: this.tags,
            folder: this.folder,
            customMetadata: this.customMetadata,
            isPrivateFile: this.isPrivateFile,
            overwriteFile: this.overwriteFile,
            overwriteAITags: this.overwriteAITags,
            overwriteTags: this.overwriteTags,
            overwriteCustomMetadata: this.overwriteCustomMetadata,
            customCoordinates: this.customCoordinates,
            responseFields: this.responseFields,
            extensions: this.extensions,
            webhookUrl: this.webhookUrl,
            onError: this.onError,
            onSuccess: this.onSuccess,
            transformation: this.transformation,
            checks: this.checks
        };
        // Custom validation
        if (!this.checkCustomFileValidation(options.file)) {
            return;
        }
        if (!this.checkAuthenticator(options)) {
            return;
        }
        this.startIkUpload(e, options);
    }
    checkCustomFileValidation(file) {
        if (this.validateFile && typeof this.validateFile === 'function') {
            return this.validateFile(file);
        }
        return true;
    }
    checkAuthenticator(options) {
        if (!this.authenticator || typeof this.authenticator !== "function" || this.authenticator.length !== 0 || !(this.authenticator() instanceof Promise)) {
            return this.throwError("The authenticator function is not provided or is not a function.", options);
        }
        return true;
    }
    throwError(message, options) {
        if (options && options.onError instanceof EventEmitter) {
            options.onError.emit({
                message: message || "Something went wrong.",
            });
        }
        return false;
    }
    startIkUpload(e, options) {
        // Custom upload-start tracker
        if (this.onUploadStart && typeof this.onUploadStart === 'function') {
            this.onUploadStart(e);
        }
        // Custom upload-progress tracker
        options.xhr = new XMLHttpRequest();
        this.xhr = options.xhr;
        const params = this.getUploadParams(options);
        const progressCb = this.createUploadProgressMonitor(options.xhr);
        const ik = this.getIkInstance();
        const authPromise = this.authenticator();
        authPromise.then((obj) => this.handleAuthResponse(obj, ik, params, options, progressCb)).catch((data) => {
            var error;
            if (data instanceof Array) {
                error = data[0];
            }
            else {
                error = data;
            }
            this.throwError(String(error), options);
        });
    }
    getIkInstance() {
        if (this.publicKey === undefined ||
            this.urlEndpoint === undefined) {
            return this.imagekit.ikInstance;
        }
        return new ImagekitService({
            urlEndpoint: this.urlEndpoint,
            publicKey: this.publicKey,
        })._ikInstance;
    }
    handleUploadResponse(err, result, options, progressCb) {
        if (err) {
            this.throwError(err, options);
        }
        else {
            if (options.onSuccess instanceof EventEmitter) {
                options.onSuccess.emit(result);
            }
            if (options.xhr)
                options.xhr.upload.removeEventListener('progress', progressCb);
        }
    }
    createUploadProgressMonitor(xhr) {
        const progressCb = (e) => {
            if (this.onUploadProgress && typeof this.onUploadProgress === 'function') {
                // Custom upload-progress tracker
                this.onUploadProgress(e);
            }
        };
        if (xhr)
            xhr.upload.addEventListener('progress', progressCb);
        return progressCb;
    }
    getUploadParams(options) {
        const params = {
            file: options.file,
            fileName: options.fileName
        };
        if (options.useUniqueFileName !== undefined) {
            Object.assign(params, { useUniqueFileName: options.useUniqueFileName });
        }
        if (options.folder !== undefined) {
            Object.assign(params, { folder: options.folder });
        }
        if (options.customMetadata !== undefined) {
            Object.assign(params, { customMetadata: options.customMetadata });
        }
        if (options.webhookUrl !== undefined) {
            Object.assign(params, { webhookUrl: options.webhookUrl });
        }
        if (options.isPrivateFile !== undefined) {
            Object.assign(params, { isPrivateFile: options.isPrivateFile });
        }
        if (options.overwriteFile !== undefined) {
            Object.assign(params, { overwriteFile: options.overwriteFile });
        }
        if (options.overwriteAITags !== undefined) {
            Object.assign(params, { overwriteAITags: options.overwriteAITags });
        }
        if (options.overwriteTags !== undefined) {
            Object.assign(params, { overwriteTags: options.overwriteTags });
        }
        if (options.overwriteCustomMetadata !== undefined) {
            Object.assign(params, { overwriteCustomMetadata: options.overwriteCustomMetadata });
        }
        if (options.tags !== undefined) {
            Object.assign(params, { tags: options.tags });
        }
        if (options.customCoordinates !== undefined) {
            Object.assign(params, { customCoordinates: options.customCoordinates });
        }
        if (options.responseFields !== undefined) {
            Object.assign(params, { responseFields: options.responseFields });
        }
        if (options.extensions !== undefined) {
            Object.assign(params, { extensions: options.extensions });
        }
        if (options.xhr !== undefined) {
            Object.assign(params, { xhr: options.xhr });
        }
        if (options.transformation !== undefined) {
            Object.assign(params, { transformation: options.transformation });
        }
        if (options.checks !== undefined) {
            Object.assign(params, { checks: options.checks });
        }
        return params;
    }
}
IkUploadComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: IkUploadComponent, deps: [{ token: i0.ElementRef }, { token: i1.ImagekitService }], target: i0.ɵɵFactoryTarget.Component });
IkUploadComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: IkUploadComponent, selector: "ik-upload", inputs: { fileName: "fileName", useUniqueFileName: "useUniqueFileName", tags: "tags", folder: "folder", publicKey: "publicKey", urlEndpoint: "urlEndpoint", authenticator: "authenticator", isPrivateFile: "isPrivateFile", overwriteFile: "overwriteFile", overwriteAITags: "overwriteAITags", overwriteTags: "overwriteTags", overwriteCustomMetadata: "overwriteCustomMetadata", customCoordinates: "customCoordinates", webhookUrl: "webhookUrl", responseFields: "responseFields", extensions: "extensions", customMetadata: "customMetadata", buttonRef: "buttonRef", validateFile: "validateFile", onUploadStart: "onUploadStart", onUploadProgress: "onUploadProgress", transformation: "transformation", checks: "checks" }, outputs: { onError: "onError", onSuccess: "onSuccess" }, providers: [ImagekitService], ngImport: i0, template: `
  <input *ngIf="buttonRef; else elseBlock" type="file" (change)="handleFileInput($event)" style="display:none"/>
  <ng-template #elseBlock>
    <input type="file" (change)="handleFileInput($event)" />
  </ng-template>
  `, isInline: true, directives: [{ type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: IkUploadComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'ik-upload',
                    template: `
  <input *ngIf="buttonRef; else elseBlock" type="file" (change)="handleFileInput($event)" style="display:none"/>
  <ng-template #elseBlock>
    <input type="file" (change)="handleFileInput($event)" />
  </ng-template>
  `,
                    providers: [ImagekitService]
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i1.ImagekitService }]; }, propDecorators: { fileName: [{
                type: Input,
                args: ['fileName']
            }], useUniqueFileName: [{
                type: Input,
                args: ['useUniqueFileName']
            }], tags: [{
                type: Input,
                args: ['tags']
            }], folder: [{
                type: Input,
                args: ['folder']
            }], publicKey: [{
                type: Input,
                args: ['publicKey']
            }], urlEndpoint: [{
                type: Input,
                args: ['urlEndpoint']
            }], authenticator: [{
                type: Input,
                args: ["authenticator"]
            }], isPrivateFile: [{
                type: Input,
                args: ['isPrivateFile']
            }], overwriteFile: [{
                type: Input,
                args: ['overwriteFile']
            }], overwriteAITags: [{
                type: Input,
                args: ['overwriteAITags']
            }], overwriteTags: [{
                type: Input,
                args: ['overwriteTags']
            }], overwriteCustomMetadata: [{
                type: Input,
                args: ['overwriteCustomMetadata']
            }], customCoordinates: [{
                type: Input,
                args: ['customCoordinates']
            }], webhookUrl: [{
                type: Input,
                args: ['webhookUrl']
            }], responseFields: [{
                type: Input,
                args: ['responseFields']
            }], extensions: [{
                type: Input,
                args: ['extensions']
            }], customMetadata: [{
                type: Input,
                args: ['customMetadata']
            }], buttonRef: [{
                type: Input,
                args: ['buttonRef']
            }], onError: [{
                type: Output
            }], onSuccess: [{
                type: Output
            }], validateFile: [{
                type: Input,
                args: ['validateFile']
            }], onUploadStart: [{
                type: Input,
                args: ['onUploadStart']
            }], onUploadProgress: [{
                type: Input,
                args: ['onUploadProgress']
            }], transformation: [{
                type: Input,
                args: ['transformation']
            }], checks: [{
                type: Input,
                args: ['checks']
            }] } });
//# sourceMappingURL=data:application/json;base64,